'''
Подсчитать, сколько было выделено памяти под переменные в ранее разработанных программах в рамках первых трех уроков.
Проанализировать результат и определить программы с наиболее эффективным использованием памяти.

########################################################################################################################
Посчитать четные и нечетные цифры введенного натурального числа.
Например, если введено число 34560, в нем 3 четные цифры (4, 6 и 0) и 2 нечетные (3 и 5).


########################################################################################################################

Итог:
1-й вариант кода - 108 байт
2-й - 1380 байт
3-й - 1101 байт

1-й вариант кода наиболее эффективным по использованию памяти
Добавление списоков и словарей во 2-м и 3-м вариантах сильно увеличивают использование памяти


##########################################_______Вариант 1______########################################################

'''

import sys


def memory(x):
    mem_size = 0
    mem_size += sys.getsizeof(x)

    if hasattr(x, '__iter__'):
        if hasattr(x, 'items'):
            for key, value in x.items():
                mem_size += memory(key)
                mem_size += memory(value)
        elif not isinstance(x, str):
            for item in x:
                mem_size += memory(item)
    return mem_size


# num = int(input('Введите натуральное число: ')) # закоментил введение числа пользователем
# чтобы у всех вариантов кода было одинаковое число
num = 2354786514456574
even = 0
odd = 0

while num > 0:
    res = num % 10
    num = num // 10
    if res % 2 == 0:
        even += 1
    else:
        odd += 1
print(f'Четных чисел - {even}, нечетных - {odd}')

elements = [num, even, odd, res]

sum_m = 0
for j in elements:
    sum_m += memory(j)

print(f'\nПод переменные было выделено {sum_m} байт')  # 108 byte, 64-разрядная ОС, Python 3.9
